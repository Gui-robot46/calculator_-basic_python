#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.1
#  in conjunction with Tcl version 8.6
#    Feb 28, 2020 10:09:19 PM -03  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import firstWindow_support
from machine import *

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    firstWindow_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    firstWindow_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("296x563+457+76")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(cursor="watch")
        top.configure(highlightcolor="black")

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.068, rely=0.048, height=53, relwidth=0.865)
        self.Entry1.configure(background="#1b22f2")
        self.Entry1.configure(cursor="watch")
        self.Entry1.configure(disabledbackground="#1b22f2")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#1b22f2")
        self.Entry1.configure(justify='right')
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(show="0")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.101, rely=0.053, height=44, width=239)
        self.Label2.configure(activebackground="#000000")
        self.Label2.configure(activeforeground="white")
        self.Label2.configure(background="#1b22f2")
        self.Label2.configure(disabledforeground="#000000")
        self.Label2.configure(justify='right')
        self.Label2.configure(text='''0''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.743, rely=0.007, height=22, width=69)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''C@lc''')

        self.Button7 = tk.Button(top)
        self.Button7.place(relx=0.034, rely=0.167, height=84, width=91)
        self.Button7.configure(activebackground="#f9f9f9")
        self.Button7.configure(text='''7''')
        self.Button7.bind("<Button>", self.button7)

        self.Button8 = tk.Button(top)
        self.Button8.place(relx=0.338, rely=0.167, height=84, width=91)
        self.Button8.configure(activebackground="#f9f9f9")
        self.Button8.configure(text='''8''')
        self.Button8.bind("<Button>", self.button8)

        self.Button9 = tk.Button(top)
        self.Button9.place(relx=0.642, rely=0.167, height=84, width=91)
        self.Button9.configure(activebackground="#f9f9f9")
        self.Button9.configure(text='''9''')
        self.Button9.bind("<Button>", self.button9)

        self.Button4 = tk.Button(top)
        self.Button4.place(relx=0.034, rely=0.314, height=83, width=91)
        self.Button4.configure(activebackground="#f9f9f9")
        self.Button4.configure(text='''4''')
        self.Button4.bind("<Button>", self.button4)

        self.Button5 = tk.Button(top)
        self.Button5.place(relx=0.338, rely=0.314, height=83, width=91)
        self.Button5.configure(activebackground="#f9f9f9")
        self.Button5.configure(text='''5''')
        self.Button5.bind("<Button>", self.button5)

        self.Button6 = tk.Button(top)
        self.Button6.place(relx=0.642, rely=0.314, height=84, width=91)
        self.Button6.configure(activebackground="#f9f9f9")
        self.Button6.configure(text='''6''')
        self.Button6.bind("<Button>", self.button6)

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.034, rely=0.46, height=84, width=91)
        self.Button1.configure(activebackground="#f9f9f9")
        self.Button1.configure(text='''1''')
        self.Button1.bind("<Button>", self.button1)

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.338, rely=0.46, height=84, width=91)
        self.Button2.configure(activebackground="#f9f9f9")
        self.Button2.configure(text='''2''')
        self.Button2.bind("<Button>", self.button2)

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.642, rely=0.458, height=84, width=91)
        self.Button3.configure(activebackground="#f9f9f9")
        self.Button3.configure(text='''3''')
        self.Button3.bind("<Button>", self.button3)

        self.Button_more = tk.Button(top)
        self.Button_more.place(relx=0.027, rely=0.732, height=71, width=71)
        self.Button_more.configure(activebackground="#f9f9f9")
        self.Button_more.configure(text='''+ / ↵''')
        self.Button_more.bind("<Button>", self.more)

        self.Button_less = tk.Button(top)
        self.Button_less.place(relx=0.264, rely=0.73, height=71, width=71)
        self.Button_less.configure(activebackground="#f9f9f9")
        self.Button_less.configure(text='''-''')
        self.Button_less.bind("<Button>", self.less)

        self.Button_times = tk.Button(top)
        self.Button_times.place(relx=0.5, rely=0.73, height=71, width=71)
        self.Button_times.configure(activebackground="#f9f9f9")
        self.Button_times.configure(text='''x''')
        self.Button_times.bind("<Button>", self.times)

        self.Button_pow = tk.Button(top)
        self.Button_pow.place(relx=0.027, rely=0.854, height=71, width=71)
        self.Button_pow.configure(activebackground="#f9f9f9")
        self.Button_pow.configure(text='''x²''')
        self.Button_pow.bind("<Button>", self.pow)

        self.Button_square = tk.Button(top)
        self.Button_square.place(relx=0.264, rely=0.854, height=71, width=71)
        self.Button_square.configure(activebackground="#f9f9f9")
        self.Button_square.configure(text='''√x''')
        self.Button_square.bind("<Button>", self.square)

        self.Button_division = tk.Button(top)
        self.Button_division.place(relx=0.5, rely=0.854, height=71, width=71)
        self.Button_division.configure(activebackground="#f9f9f9")
        self.Button_division.configure(text='''/''')
        self.Button_division.bind("<Button>", self.division)

        self.Button_clear = tk.Button(top)
        self.Button_clear.place(relx=0.733, rely=0.732, height=140, width=71)
        self.Button_clear.configure(activebackground="#f9f9f9")
        self.Button_clear.configure(text='''C''')
        self.Button_clear.bind("<Button>", self.clear)
        self.Button0 = tk.Button(top)
        self.Button0.place(relx=0.034, rely=0.607, height=71, width=91)
        self.Button0.configure(activebackground="#f9f9f9")
        self.Button0.configure(text='''0''')
        self.Button0.bind("<Button>", self.button0)

        self.Button000 = tk.Button(top)
        self.Button000.place(relx=0.642, rely=0.607, height=71, width=91)
        self.Button000.configure(activebackground="#f9f9f9")
        self.Button000.configure(text='''000''')
        self.Button000.bind("<Button>", self.button000)

        self.Button00 = tk.Button(top)
        self.Button00.place(relx=0.338, rely=0.607, height=71, width=91)
        self.Button00.configure(activebackground="#f9f9f9")
        self.Button00.configure(text='''00''')
        self.Button00.bind("<Button>", self.button00)

    def button0(self, event):
        if Machine.operator == '':
            if Machine.number != 0:
                Machine.number = (Machine.number * 10)
            self.Label2.configure(text=Machine.number)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def button00(self, event):
        if Machine.operator == '':
            if Machine.number != 0:
                Machine.number = (Machine.number * 100)
            self.Label2.configure(text=Machine.number)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def button000(self, event):
        if Machine.operator == '':
            if Machine.number != 0:
                Machine.number = (Machine.number * 1000)
            self.Label2.configure(text=Machine.number)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def button1(self, event):
        if Machine.operator == '':
            if Machine.number == 0:
                Machine.number = 1
            else:
                Machine.number = (Machine.number * 10) + 1
            self.Label2.configure(text=Machine.number)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def button2(self, event):
        if Machine.operator == '':
            if Machine.number == 0:
                Machine.number = 2
            else:
                Machine.number = (Machine.number * 10) + 2
            self.Label2.configure(text=Machine.number)
        else:
            if Machine.number == 0 and Machine.signal == 'after':
                Machine.number = 1
            elif Machine.number != 0 and Machine.signal == 'after':
                Machine.number = (Machine.number * 10) + 1
            else:
                pass

            if Machine.number2 == 0:
                Machine.number2 = 2
            else:
                Machine.number2 = (Machine.number2 * 10) + 2
            self.Label2.configure(text=Machine.number2)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def button3(self, event):
        if Machine.operator == '':
            if Machine.number == 0:
                Machine.number = 3
            else:
                Machine.number = (Machine.number * 10) + 3
            self.Label2.configure(text=Machine.number)
        else:
            if Machine.number == 0 and Machine.signal == 'after':
                Machine.number = 1
            elif Machine.number != 0 and Machine.signal == 'after':
                Machine.number = (Machine.number * 10) + 1
            else:
                pass

            if Machine.number2 == 0:
                Machine.number2 = 3
            else:
                Machine.number2 = (Machine.number2 * 10) + 3
            self.Label2.configure(text=Machine.number2)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def button4(self, event):
        if Machine.operator == '':
            if Machine.number == 0:
                Machine.number = 4
            else:
                Machine.number = (Machine.number * 10) + 4
            self.Label2.configure(text=Machine.number)
        else:
            if Machine.number == 0 and Machine.signal == 'after':
                Machine.number = 1
            elif Machine.number != 0 and Machine.signal == 'after':
                Machine.number = (Machine.number * 10) + 1
            else:
                pass

            if Machine.number2 == 0:
                Machine.number2 = 4
            else:
                Machine.number2 =(Machine.number2 * 10) + 4
            self.Label2.configure(text=Machine.number2)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def button5(self, event):
        if Machine.operator == '':
            if Machine.number == 0:
                Machine.number = 5
            else:
                Machine.number = (Machine.number * 10) + 5
            self.Label2.configure(text=Machine.number)
        else:
            if Machine.number == 0 and Machine.signal == 'after':
                Machine.number = 1
            elif Machine.number != 0 and Machine.signal == 'after':
                Machine.number = (Machine.number * 10) + 1
            else:
                pass

            if Machine.number2 == 0:
                Machine.number2 = 5
            else:
                Machine.number2 = (Machine.number2 * 10) + 5
            self.Label2.configure(text=Machine.number2)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def button6(self, event):
        if Machine.operator == '':
            if Machine.number == 0:
                Machine.number = 6
            else:
                Machine.number = (Machine.number * 10) + 6
            self.Label2.configure(text=Machine.number)
        else:
            if Machine.number == 0 and Machine.signal == 'after':
                Machine.number = 1
            elif Machine.number != 0 and Machine.signal == 'after':
                Machine.number = (Machine.number * 10) + 1
            else:
                pass

            if Machine.number2 == 0:
                Machine.number2 = 6
            else:
                Machine.number2 = (Machine.number2 * 10) + 6
            self.Label2.configure(text=Machine.number2)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def button7(self, event):
        if Machine.operator == '':
            if Machine.number == 0:
                Machine.number = 7
            else:
                Machine.number = (Machine.number * 10) + 7
            self.Label2.configure(text=Machine.number)
        else:
            if Machine.number == 0 and Machine.signal == 'after':
                Machine.number = 1
            elif Machine.number != 0 and Machine.signal == 'after':
                Machine.number = (Machine.number * 10) + 1
            else:
                pass

            if Machine.number2 == 0:
                Machine.number2 = 7
            else:
                Machine.number2 = (Machine.number2 * 10) + 7
            self.Label2.configure(text=Machine.number2)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def button8(self, event):
        if Machine.operator == '':
            if Machine.number == 0:
                Machine.number = 8
            else:
                Machine.number = (Machine.number * 10) + 8
            self.Label2.configure(text=Machine.number)
        else:
            if Machine.number == 0 and Machine.signal == 'after':
                Machine.number = 1
            elif Machine.number != 0 and Machine.signal == 'after':
                Machine.number = (Machine.number * 10) + 1
            else:
                pass

            if Machine.number2 == 0:
                Machine.number2 = 8
            else:
                Machine.number2 = (Machine.number2 * 10) + 8
            self.Label2.configure(text=Machine.number2)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def button9(self, event):
        if Machine.operator == '':
            if Machine.number == 0:
                Machine.number = 9
            else:
                Machine.number = (Machine.number * 10) + 9
            self.Label2.configure(text=Machine.number)
        else:
            if Machine.number == 0 and Machine.signal == 'after':
                Machine.number = 1
            elif Machine.number != 0 and Machine.signal == 'after':
                Machine.number = (Machine.number * 10) + 1
            else:
                pass

            if Machine.number2 == 0:
                Machine.number2 = 9
            else:
                Machine.number2 = (Machine.number2 * 10) + 9
            self.Label2.configure(text=Machine.number2)
        print("Number: ", Machine.number, ". Number2: ", Machine.number2, ". Operator: ", Machine.operator)

    def more(self, event):
        Machine.operator = 'more'
        Machine.operation()
        if Machine.number2 == 0:
            self.Label2.configure(text=Machine.number)
        else:
            self.Label2.configure(text=Machine.number2)


    def less(self, event):
        Machine.operator = 'less'
        Machine.operation()
        if Machine.number2 == 0:
            self.Label2.configure(text=Machine.number)
        else:
            self.Label2.configure(text=Machine.number2)


    def times(self, event):
        Machine.operator = 'times'
        Machine.operation()
        if Machine.number2 == 0:
            self.Label2.configure(text=Machine.number)
        else:
            self.Label2.configure(text=Machine.number2)


    def division(self, event):
        Machine.operator = 'division'
        Machine.operation()
        if Machine.number2 == 0:
            self.Label2.configure(text=Machine.number)
        else:
            self.Label2.configure(text=Machine.number2)

    def pow(self, event):
        Machine.operator = 'pow'
        Machine.operation()
        if Machine.number2 == 0:
            self.Label2.configure(text=Machine.number)
        else:
            self.Label2.configure(text=Machine.number2)


    def square(self, event):
        Machine.operator = 'square'
        Machine.operation()
        if Machine.number2 == 0:
            self.Label2.configure(text=Machine.number)
        else:
            self.Label2.configure(text=Machine.number2)

    def clear(self, event):
        Machine.operator = 'clear'
        Machine.operation()
        self.Label2.configure(text=Machine.number)

if __name__ == '__main__':
    vp_start_gui()





